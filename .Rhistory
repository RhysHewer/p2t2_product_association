colnames(transFreq) <- c("rowNames", "support")
locate <- itemFrame$rhs == "iMac"
itemFrame$lhsSupport[locate,] <- "test"
test.locate <- itemFrame$lhsSupport[locate,]
test.locate <- itemFrame$lhsSupport[itemFrame$rhs == "iMac"]
locate <- str_locate(itemFrame$rhs, "iMac")
itemFrame$lhsSupport[locate] <- "test"
itemFrame$lhsSupport[locate,] <- "test"
class(locate)
locate
locate <- str_which(itemFrame$rhs, "iMac")
itemFrame$lhsSupport[locate,] <- "test"
itemFrame$lhsSupport[locate] <- "test"
locate <- str_which(itemFrame$rhs, "iMac")
itemFrame$lhsSupport[locate] <- "test"
itemFrame$lhsSupport <- NA
locate <- str_which(itemFrame$rhs, "iMac")
itemFrame$lhsSupport[locate] <- "test"
View(transFreq)
locate2 <- str_which(transFreq$rowNames, "iMac")
supp <- transFreq$support[locate2]
itemFrame$lhsSupport[locate] <- supp
load("output/transData.RDS") # transaction data individual items (sparse matrix)
load("output/prodData.RDS") # transaction data indivifual items (S3 data)
load("output/typeData.RDS") # transaction data product type (sparse matrix)
#item frequency - nothing interesting here
transFreq <- itemFrequency(transData) %>% as.data.frame %>% rownames_to_column()
colnames(transFreq) <- c("rowNames", "support")
#rules creation
basketRulesItem <- apriori(transData, parameter = list(supp = 0.002, conf = 0.3, minlen = 2))
basketRulesItem
itemFrame <- data.frame(
lhs = labels(lhs(basketRulesItem)),
rhs = labels(rhs(basketRulesItem)),
basketRulesItem@quality)
suppReplace <- function(x){
locate <- str_which(itemFrame$rhs, x)
locate2 <- str_which(transFreq$rowNames, x)
supp <- transFreq$support[locate2]
itemFrame$lhsSupport[locate] <- supp
}
suppReplace("iMac")
#set up blank column
itemFrame$lhsSupport <- NA
suppReplace <- function(x){
locate <- str_which(itemFrame$rhs, x)
locate2 <- str_which(transFreq$rowNames, x)
supp <- transFreq$support[locate2]
itemFrame$lhsSupport[locate] <- supp
}
suppReplace("iMac")
suppReplace <- function(x){
locate <- str_which(itemFrame$rhs, x)
locate2 <- str_which(transFreq$rowNames, x)
supp <- transFreq$support[locate2]
itemFrame$lhsSupport[locate] <- supp
}
test <- suppReplace("iMac")
x <- "iMac"
locate <- str_which(itemFrame$rhs, x)
locate2 <- str_which(transFreq$rowNames, x)
supp <- transFreq$support[locate2]
itemFrame$lhsSupport[locate] <- supp
load("output/transData.RDS") # transaction data individual items (sparse matrix)
load("output/prodData.RDS") # transaction data indivifual items (S3 data)
load("output/typeData.RDS") # transaction data product type (sparse matrix)
#item frequency - nothing interesting here
transFreq <- itemFrequency(transData) %>% as.data.frame %>% rownames_to_column()
colnames(transFreq) <- c("rowNames", "support")
basketRulesItem <- apriori(transData, parameter = list(supp = 0.002, conf = 0.3, minlen = 2))
basketRulesItem
itemFrame <- data.frame(
lhs = labels(lhs(basketRulesItem)),
rhs = labels(rhs(basketRulesItem)),
basketRulesItem@quality)
suppReplace <- function(x){
locate <- str_which(itemFrame$rhs, x)
locate2 <- str_which(transFreq$rowNames, x)
supp <- transFreq$support[locate2]
itemFrame$lhsSupport[locate] <- supp
}
test <- suppReplace("iMac")
#set up blank column
itemFrame$lhsSupport <- NA
suppReplace <- function(x){
locate <- str_which(itemFrame$rhs, x)
locate2 <- str_which(transFreq$rowNames, x)
supp <- transFreq$support[locate2]
itemFrame$lhsSupport[locate] <- supp
}
test <- suppReplace("iMac")
suppReplace <- function(x){
locate <- str_which(itemFrame$rhs, x)
locate2 <- str_which(transFreq$rowNames, x)
supp <- transFreq$support[locate2]
itemFrame$lhsSupport[locate] <- supp
itemFrame
}
test <- suppReplace("iMac")
suppReplace("iMac")
View(test)
#set up blank column
itemFrame$rhsSupport <- NA
suppReplace <- function(x){
locate <- str_which(itemFrame$rhs, x)
locate2 <- str_which(transFreq$rowNames, x)
supp <- transFreq$support[locate2]
itemFrame$rhsSupport[locate] <- supp
itemFrame
}
cross <- suppReplace("iMac")
#
itemFrame %>% filter(rhs = "VGA Monitor Cable")
#
itemFrame %>% filter(rhs == "VGA Monitor Cable")
#Recommendation Engine examples
recEng <- itemFrame %>% filter(str_detect("iMac"))
#Recommendation Engine examples
recEng <-  filter(str_detect(itemFrame, "iMac"))
#Recommendation Engine examples
recEng <-  str_detect(itemFrame, "iMac")
#Recommendation Engine examples
recEng <- str_which(itemFrame, "iMac")
#Recommendation Engine examples
recEng <- itemFrame(grepl("iMac", itemFrame$lhs))
#Recommendation Engine examples
recEng <- grepl("iMac", itemFrame$lhs)
#Recommendation Engine examples
recEng <- itemFrame %>% filter(grepl("iMac", itemFrame$lhs))
View(recEng)
#Recommendation Engine examples
recEng <- itemFrame %>% filter(grepl(c("iMac","HP"), itemFrame$lhs))
#Recommendation Engine examples
recEng <- itemFrame %>% filter(grepl("{iMac,Logitech MK550 Wireless Wave Keyboard and Mouse Combo}", itemFrame$lhs))
#Recommendation Engine examples
recEng <- itemFrame %>% filter(grepl("iMac,Logitech MK550 Wireless Wave Keyboard and Mouse Combo", itemFrame$lhs))
View(recEng)
#Recommendation Engine examples
recEng <- itemFrame %>% filter(grepl("iMac,Logitech MK550 Wireless Wave Keyboard and Mouse Combo", itemFrame$lhs))
recEng
#Recommendation Engine examples
recEng <- itemFrame %>% filter(grepl("iMac,Logitech MK550 Wireless Wave Keyboard and Mouse Combo", itemFrame$lhs))
kable(recEng) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#Load data - Blackwell products info
blackData <- read.csv("data/existingProductAttributes.csv")
View(blackData)
#item frequency - nothing interesting here
transFreq <- itemFrequency(transData) %>% as.data.frame %>% rownames_to_column()
#summary + visualisation of profit/volumne/margin/price blackwells product types
blackData <- blackData %>% filter(Product.Type != "Extended Warranty") %>%
mutate(profit = (Volume * Price * Profit.margin)/10^3, unitProfit = Price * Profit.margin)
blackProfit <- blackData %>% group_by(Product.Type) %>%
summarise(absProfit = sum(profit), unitProfit = mean(unitProfit), volume = sum(Volume),
meanMargin = mean(Profit.margin), avgPrice = mean(Price))
blackProfit
blackData
View(blackData)
#summary + visualisation of profit/volumne/margin/price blackwells product types
blackData <- blackData %>% filter(Product.Type != "Extended Warranty") %>%
mutate(profit = (Volume * Price * Profit.margin)/10^3, unitProfit = Price * Profit.margin)
blackData
blackProfit <- blackData %>% group_by(Product.Type) %>%
summarise(absProfit = sum(profit), unitProfit = mean(unitProfit), volume = sum(Volume),
meanMargin = mean(Profit.margin), avgPrice = mean(Price))
blackProfit
View(blackProfit)
install.packages("treemap")
library(treemap)
t1 <- treemap(blackProfit, index = c("Category","Sub.Category"), vSize = "volume")
t1 <- treemap(blackProfit, index = "Product.Type", vSize = "volume")
t1 <- treemap(blackProfit, index = "Product.Type", vSize = "volume", title = "Blackwell Sales Volume by Product Type")
t2 <- treemap(blackProfit, index = "Product.Type", vSize = "absProfit", title = "Blackwell Profit by Product Type")
blackProfit
load("output/typeData.RDS") # transaction data product type (sparse matrix)
#Treemap Electronidex Product Type
electroProducts <- itemFrequency(typeData) %>% as.data.frame() %>% rownames_to_column()
names(electroProducts) <- c("ProductType", "Support")
electroProducts
View(electroProducts)
t3 <- treemap(electroProducts, index = "ProductType", vSize = "Support", title = "Electronidex Sales Volume (est.) by Product Type")
grid.arrange(ncol = 2, t1,t3)
grid.arrange(ncol = 2, t1, t3)
grid.arrange(t1, t3)
grid.arrange(grobtree(t1), grobtree(t3))
grid.arrange(grobTree(t1), grobTree(t3))
par(mfrow=c(1,2))
t1
t3
par(mfrow=c(1,2))
t1
t3
t1
treemap(blackProfit, index = "Product.Type", vSize = "volume", title = "Blackwell Sales Volume by Product Type")
treemap(blackProfit, index = "Product.Type", vSize = "absProfit", title = "Blackwell Profit by Product Type")
blackData <- blackData %>% filter(Product.Type != "Extended Warranty") %>%
mutate(profit = (Volume * Price * Profit.margin)/10^3, unitProfit = Price * Profit.margin)
blackData
blackProfit <- blackData %>% group_by(Product.Type) %>%
summarise(absProfit = sum(profit), unitProfit = mean(unitProfit), volume = sum(Volume),
meanMargin = mean(Profit.margin), avgPrice = mean(Price))
blackProfit
treemap(blackProfit, index = "Product.Type", vSize = "volume", title = "Blackwell Sales Volume by Product Type")
blackData <- blackData %>% filter(Product.Type != "Extended Warranty") %>%
mutate(profit = (Volume * Price * Profit.margin)/10^3, unitProfit = Price * Profit.margin)
blackProfit <- blackData %>% group_by(Product.Type) %>%
summarise(absProfit = sum(profit), unitProfit = mean(unitProfit), volume = sum(Volume),
meanMargin = mean(Profit.margin), avgPrice = mean(Price))
treemap(blackProfit, index = "Product.Type", vSize = "volume", title = "Blackwell Sales Volume by Product Type")
treemap(blackProfit, index = "Product.Type", vSize = "volume", title = "Blackwell Sales Volume by Product Type")
blackData <- blackData %>% filter(Product.Type != "Extended Warranty") %>%
mutate(profit = (Volume * Price * Profit.margin)/10^3, unitProfit = Price * Profit.margin)
blackProfit <- blackData %>% group_by(Product.Type) %>%
summarise(absProfit = sum(profit), unitProfit = mean(unitProfit), volume = sum(Volume),
meanMargin = mean(Profit.margin), avgPrice = mean(Price))
treemap(blackProfit, index = "Product.Type", vSize = "volume", title = "Blackwell Sales Volume by Product Type")
treemap(blackProfit, index = "Product.Type", vSize = "absProfit", title = "Blackwell Profit by Product Type")
blackData <- blackData %>% filter(Product.Type != "Extended Warranty") %>%
mutate(profit = (Volume * Price * Profit.margin)/10^3, unitProfit = Price * Profit.margin)
blackProfit <- blackData %>% group_by(Product.Type) %>%
summarise(absProfit = sum(profit), unitProfit = mean(unitProfit), volume = sum(Volume),
meanMargin = mean(Profit.margin), avgPrice = mean(Price))
treemap(blackProfit, index = "Product.Type", vSize = "volume", title = "Blackwell Sales Volume by Product Type")
treemap(blackProfit, index = "Product.Type", vSize = "absProfit", title = "Blackwell Profit by Product Type")
##Load Data - Blackwell demographics
blackDemo <- read.csv("data/Blackwell_Demographic_Data.csv")
View(blackDemo)
##Load Data - Blackwell demographics
blackDemo <- read_csv2("data/Blackwell_Demographic_Data.csv")
View(blackDemo)
blackDemo <- blackDemo %>% rename(in-store, instore)
blackDemo <- blackDemo %>% rename("in-store", "instore")
colnames(blackDemo$`in-store`) <- "instore"
colnames(blackDemo)[1] <- "instore"
View(blackDemo)
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n())
onlinePurch
onlinePurch <- ifelse(instore == 0, "online", "instore")
onlinePurch <- ifelse(onlinePurch$instore == 0, "online", "instore")
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n())
onlinePurch$instore <- onlinePurch$instore %>% as.factor()
onlinePurch
g6 <- ggplot(onlinePurch, aes(instore, count)) +
geom_col()
g6
onlinePurch$instore[onlinePurch$instore == 0] <- "Online"
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n())
onlinePurch$instore[onlinePurch$instore == 0] <- "Online"
View(onlinePurch)
onlinePurch$instore[onlinePurch$instore == 1] <- "Instore"
g6 <- ggplot(onlinePurch, aes(instore, count)) +
geom_col()
g6
View(blackDemo)
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n()/nrow())
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n(), percent = count/nrow(onlinePurch))
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n(), percent = (count/nrow(onlinePurch))*100)
onlinePurch
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n(), percent = (count/colSums(count))*100)
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n(), percent = (count/sum(onlinePurch$count))*100)
onlinePurch
g6 <- ggplot(onlinePurch, aes(instore, percent)) +
geom_col() +
theme_bw() +
ylab("% Transactions") +
xlab("Purchase Location") +
ggtitle("Blackwell: Transaction Location")
g6
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n(), percent = (count/sum(onlinePurch$count))*100)
onlinePurch$instore[onlinePurch$instore == 0] <- "Online"
onlinePurch$instore[onlinePurch$instore == 1] <- "Instore"
g6 <- ggplot(onlinePurch, aes(instore, percent)) +
geom_col() +
theme_bw() +
ylab("% Transactions") +
xlab("Purchase Location") +
ggtitle("Blackwell: Transaction Location")
g6
g6 <- ggplot(onlinePurch, aes(instore, percent)) +
geom_col() +
theme_bw() +
ylab("% Transactions") +
xlab("Purchase Location") +
ggtitle("Blackwell: Transaction Location") +
geom_text(aes(label = percent %>% round(0)), vjust = -0.3)
g6
g6 <- ggplot(onlinePurch, aes(instore, percent)) +
geom_col(aes(fill = "#31913c")) +
theme_bw() +
ylab("% Transactions") +
xlab("Purchase Location") +
ggtitle("Blackwell: Transaction Location") +
geom_text(aes(label = percent %>% round(0)), vjust = -0.3)
g6
g6 <- ggplot(onlinePurch, aes(instore, percent)) +
geom_col(fill = "#31913c") +
theme_bw() +
ylab("% Transactions") +
xlab("Purchase Location") +
ggtitle("Blackwell: Transaction Location") +
geom_text(aes(label = percent %>% round(0)), vjust = -0.3)
g6
#Load Data - profit predictions Blackwell
profPred <- read.csv("data/BWNewProfitPredictions.csv")
View(profPred)
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n(), percent = (count/sum(onlinePurch$count))*100)
onlinePurch$instore[onlinePurch$instore == 0] <- "Online"
onlinePurch$instore[onlinePurch$instore == 1] <- "In Store"
g6 <- ggplot(onlinePurch, aes(instore, percent)) +
geom_col(fill = "#31913c") +
theme_bw() +
ylab("% Transactions") +
xlab("Purchase Location") +
ggtitle("Blackwell: Transaction Location") +
geom_text(aes(label = percent %>% round(0)), vjust = -0.3)
g6
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n(), percent = (count/sum(onlinePurch$count))*100)
onlinePurch$instore[onlinePurch$instore == 0] <- "Online"
onlinePurch$instore[onlinePurch$instore == 1] <- "In Store"
g6 <- ggplot(onlinePurch, aes(instore, percent)) +
geom_col(fill = "#31913c") +
theme_bw() +
ylab("% Transactions") +
xlab("Purchase Location") +
ggtitle("Blackwell: Transaction Location") +
geom_text(aes(label = percent %>% round(0)), vjust = -0.3)
g6
#load csv data
transData <- read.transactions("C:/Users/rhysh/Google Drive/Data Science/Ubiqum/Project 2/Task 4/data/ElectronidexTransactions2017.csv", format = "basket", sep = ",")
prodData <- read.csv("C:/Users/rhysh/Google Drive/Data Science/Ubiqum/Project 2/Task 4/data/ElectronidexTransactions2017.csv", header = FALSE)
#Load Data - profit predictions Blackwell
profPred <- read.csv("C:/Users/rhysh/Google Drive/Data Science/Ubiqum/Project 2/Task 4/data/BWNewProfitPredictions.csv")
kable(profPred) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
#load csv data
transData <- read.transactions("C:/Users/rhysh/Google Drive/Data Science/Ubiqum/Project 2/Task 4/data/ElectronidexTransactions2017.csv", format = "basket", sep = ",")
prodData <- read.csv("C:/Users/rhysh/Google Drive/Data Science/Ubiqum/Project 2/Task 4/data/ElectronidexTransactions2017.csv", header = FALSE)
#Load data - Blackwell products info
blackData <- read.csv("C:/Users/rhysh/Google Drive/Data Science/Ubiqum/Project 2/Task 4/data/existingProductAttributes.csv")
##Load Data - Blackwell demographics
blackDemo <- read_csv2("C:/Users/rhysh/Google Drive/Data Science/Ubiqum/Project 2/Task 4/data/Blackwell_Demographic_Data.csv")
colnames(blackDemo)[1] <- "instore"
#Load Data - profit predictions Blackwell
profPred <- read.csv("C:/Users/rhysh/Google Drive/Data Science/Ubiqum/Project 2/Task 4/data/BWNewProfitPredictions.csv")
blackData <- blackData %>% filter(Product.Type != "Extended Warranty") %>%
mutate(profit = (Volume * Price * Profit.margin)/10^3, unitProfit = Price * Profit.margin)
blackProfit <- blackData %>% group_by(Product.Type) %>%
summarise(absProfit = sum(profit), unitProfit = mean(unitProfit), volume = sum(Volume),
meanMargin = mean(Profit.margin), avgPrice = mean(Price))
treemap(blackProfit, index = "Product.Type", vSize = "volume", title = "Blackwell Sales Volume by Product Type")
treemap(blackProfit, index = "Product.Type", vSize = "absProfit", title = "Blackwell Profit by Product Type")
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n(), percent = (count/sum(onlinePurch$count))*100)
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n()
onlinePurch <- onlinePurch %>% mutate(percent = (count/sum(onlinePurch$count))*100)
#Blackwell instore v online
onlinePurch <- blackDemo %>% group_by(instore) %>%
summarise(count = n())
onlinePurch <- onlinePurch %>% mutate(percent = (count/sum(onlinePurch$count))*100)
onlinePurch$instore[onlinePurch$instore == 0] <- "Online"
onlinePurch$instore[onlinePurch$instore == 1] <- "In Store"
g6 <- ggplot(onlinePurch, aes(instore, percent)) +
geom_col(fill = "#31913c") +
theme_bw() +
ylab("% Transactions") +
xlab("Purchase Location") +
ggtitle("Blackwell: Transaction Location") +
geom_text(aes(label = percent %>% round(0)), vjust = -0.3)
g6
electroProducts <- itemFrequency(typeData) %>% as.data.frame() %>% rownames_to_column()
#Load type data
load("C:/Users/rhysh/Google Drive/Data Science/Ubiqum/Project 2/Task 4/output/typeData.RDS")
electroProducts <- itemFrequency(typeData) %>% as.data.frame() %>% rownames_to_column()
names(electroProducts) <- c("ProductType", "Support")
treemap(electroProducts, index = "ProductType", vSize = "Support", title = "Electronidex Sales Volume (est.) by Product Type")
View(blackData)
View(blackDemo)
#Blackwell items per purchase
numItems <- blackDemo %>% group_by(items) %>%
summarise(items = n())
#Blackwell items per purchase
numItems <- blackDemo %>% group_by(items) %>%
summarise(num_items = n())
numItems
numItems <- numItems %>% mutate(percent = (num_items/sum(numItems$num_items))*100)
numItems
g7 <- ggplot(blackDemo, aes(items))+
geom_histogram()
g7
g7 <- ggplot(numItems, aes(items, percent)) +
geom_col()
g7
#Electronidex items per purchase
summary(itemFrequency(transData))
#Electronidex items per purchase
itemFrequency(transData)
#Electronidex items per purchase
summary(transData)
attributes(transData)
#Electronidex items per purchase
s1 <- summary(transData)
attributes(s1)
#Electronidex items per purchase
transData$lengths
View(transData)
#Electronidex items per purchase
length(transData)
#Electronidex items per purchase
sizeTrans <- size(transData)
table(sizeTrans)
transTable <- table(sizeTrans) %>% as.data.frame()
View(transTable)
g8 <- ggplot(transTable, aes(sizeTrans, Freq)) +
geom_col()
g8
transTable <- transTable %>% mutate(percent = (freq/sum(transTable$Freq))*100)
transTable <- transTable %>% mutate(percent = (Freq/sum(transTable$Freq))*100)
g8 <- ggplot(transTable, aes(sizeTrans, Freq)) +
geom_col()
g8
transTable
g8 <- ggplot(transTable, aes(sizeTrans, percent)) +
geom_col()
g8
g7 <- ggplot(numItems, aes(items, percent)) +
geom_col() +
theme_bw(fill = "#5c8cdb") +
ylab("% Transactions") +
xlab("Number of Items") +
ggtitle("Blackwell: Number of Items distribution")
g7 <- ggplot(numItems, aes(items, percent)) +
geom_col(fill = "#5c8cdb") +
theme_bw() +
ylab("% Transactions") +
xlab("Number of Items") +
ggtitle("Blackwell: Number of Items distribution")
g7
g8 <- ggplot(transTable, aes(sizeTrans, percent)) +
geom_col(fill = "#519b3b") +
theme_bw() +
ylab("% Transactions") +
xlab("Number of Items") +
ggtitle("Electronidex: Number of Items distribution")
g8
#Blackwell items per purchase
numItems <- blackDemo %>% group_by(items) %>%
summarise(num_items = n())
numItems <- numItems %>% mutate(percent = (num_items/sum(numItems$num_items))*100)
g7 <- ggplot(numItems, aes(items, percent)) +
geom_col(fill = "#5c8cdb") +
theme_bw() +
ylab("% Transactions") +
xlab("Number of Items") +
ggtitle("Blackwell: Number of Items distribution")
g7
#Blackwell items per purchase
numItems <- blackDemo %>% group_by(items) %>%
summarise(num_items = n())
numItems <- numItems %>% mutate(percent = (num_items/sum(numItems$num_items))*100)
g7 <- ggplot(numItems, aes(items, percent)) +
geom_col(fill = "#5c8cdb") +
theme_bw() +
ylab("% Transactions") +
xlab("Number of Items") +
ggtitle("Blackwell: Number of Items distribution")
g7
#Electronidex items per purchase
sizeTrans <- size(transData)
transTable <- table(sizeTrans) %>% as.data.frame()
transTable <- transTable %>% mutate(percent = (Freq/sum(transTable$Freq))*100)
g8 <- ggplot(transTable, aes(sizeTrans, percent)) +
geom_col(fill = "#519b3b") +
theme_bw() +
ylab("% Transactions") +
xlab("Number of Items") +
ggtitle("Electronidex: Number of Items distribution")
g8
transTable
g3 <- ggplot(electroProducts, aes(reorder(ProductType, -Occurance), Occurance)) +
geom_col(fill = "#ae82bc") +
theme_bw() +
ylab("Sales Volume (month, est.)") +
xlab("Product Type") +
ggtitle("Electronidex: Sales Volume (est.) per Product Type") +
theme(axis.text.x=element_text(angle = -45, hjust = 0)) +
geom_text(aes(label = Support %>% round(2)), vjust = -0.3)
g3
